Program
    { tyDecls =
        [ TypeDecl
            { tyName = Name "Range" 1:5-1:10
            , tyArgs = []
            , tyDecl = TypeProd
                [
                    ( Name "line" 1:15-1:19
                    , TId
                        ( Path
                            { path = []
                            , final = Name "Int" 1:21-1:24
                            }
                        ) ( . )
                    )
                ]
            }
        , TypeDecl
            { tyName = Name "Hole" 3:5-3:9
            , tyArgs = []
            , tyDecl = TypeSum
                (
                    ( Name "Filled" 4:4-4:10
                    ,
                        [ TId
                            ( Path
                                { path = []
                                , final = Name "Range" 4:11-4:16
                                }
                            ) ( . )
                        ]
                    ) :|
                    [
                        ( Name "Empty" 5:4-5:9
                        , []
                        )
                    ]
                )
            }
        ]
    , letDecls =
        [ LetDecl
            { declName = Name "isEmpty?" 8:4-8:12
            , declArgs =
                [ PAnn
                    ( PId
                        ( Name "hole" 8:14-8:18 ) ( . )
                    )
                    ( TId
                        ( Path
                            { path = []
                            , final = Name "Hole" 8:20-8:24
                            }
                        ) ( . )
                    ) 8:14-8:24
                ]
            , declBody = Case
                ( Upper
                    ( Path
                        { path = []
                        , final = Name "hole" 9:8-9:12
                        }
                    ) 9:8-9:12
                )
                [
                    ( PCons
                        ( Path
                            { path = []
                            , final = Name "Filled" 10:4-10:10
                            }
                        )
                        [ PId
                            ( Name "range" 10:11-10:16 ) ( . )
                        ] 10:4-10:16
                    , Lower
                        ( Path
                            { path = []
                            , final = Name "False" 10:20-10:25
                            }
                        ) 10:20-10:25
                    )
                ,
                    ( PCons
                        ( Path
                            { path = []
                            , final = Name "Empty" 11:4-11:9
                            }
                        ) [] 11:4-11:9
                    , Lower
                        ( Path
                            { path = []
                            , final = Name "True" 11:20-11:24
                            }
                        ) 11:20-11:24
                    )
                ] 9:2-11:24
            , declExt = ( . )
            }
        , LetDecl
            { declName = Name "isEmpty?" 14:4-14:12
            , declArgs = []
            , declBody = Case
                ( Upper
                    ( Path
                        { path = []
                        , final = Name "hole" 15:8-15:12
                        }
                    ) 15:8-15:12
                )
                [
                    ( PCons
                        ( Path
                            { path = []
                            , final = Name "Filled" 16:4-16:10
                            }
                        )
                        [ PId
                            ( Name "range" 16:11-16:16 ) ( . )
                        ] 16:4-16:16
                    , Lower
                        ( Path
                            { path = []
                            , final = Name "False" 16:20-16:25
                            }
                        ) 16:20-16:25
                    )
                ,
                    ( PCons
                        ( Path
                            { path = []
                            , final = Name "Empty" 17:4-17:9
                            }
                        ) [] 17:4-17:9
                    , Lower
                        ( Path
                            { path = []
                            , final = Name "True" 17:20-17:24
                            }
                        ) 17:20-17:24
                    )
                ] 15:2-17:24
            , declExt = ( . )
            }
        , LetDecl
            { declName = Name "isEmpty!" 19:4-19:12
            , declArgs =
                [ PAnn
                    ( PId
                        ( Name "hole" 19:14-19:18 ) ( . )
                    )
                    ( TId
                        ( Path
                            { path = []
                            , final = Name "Hole" 19:20-19:24
                            }
                        ) ( . )
                    ) 19:14-19:24
                ]
            , declBody = If
                ( Call
                    ( Upper
                        ( Path
                            { path = []
                            , final = Name "isEmpty?" 20:5-20:13
                            }
                        ) 20:5-20:13
                    )
                    ( Upper
                        ( Path
                            { path = []
                            , final = Name "hole" 20:14-20:18
                            }
                        ) 20:14-20:18 :| []
                    ) 20:5-20:18
                )
                ( Call
                    ( Upper
                        ( Path
                            { path = []
                            , final = Name "print" 21:9-21:14
                            }
                        ) 21:9-21:14
                    )
                    ( Lit
                        ( LStr "It's empty!!" 21:15-21:29 ) ( . ) :| []
                    ) 21:9-21:29
                )
                ( Just
                    ( Call
                        ( Upper
                            ( Path
                                { path = []
                                , final = Name "print" 22:9-22:14
                                }
                            ) 22:9-22:14
                        )
                        ( Lit
                            ( LStr "Is's not empty.'" 22:15-22:33 ) ( . ) :| []
                        ) 22:9-22:33
                    )
                ) 20:2-22:33
            , declExt = ( . )
            }
        , LetDecl
            { declName = Name "getLineOr" 24:4-24:13
            , declArgs =
                [ PAnn
                    ( PId
                        ( Name "hole" 24:15-24:19 ) ( . )
                    )
                    ( TId
                        ( Path
                            { path = []
                            , final = Name "Hole" 24:21-24:25
                            }
                        ) ( . )
                    ) 24:15-24:25
                , PAnn
                    ( PId
                        ( Name "alt" 24:28-24:31 ) ( . )
                    )
                    ( TId
                        ( Path
                            { path = []
                            , final = Name "Int" 24:33-24:36
                            }
                        ) ( . )
                    ) 24:28-24:36
                ]
            , declBody = Case
                ( Upper
                    ( Path
                        { path = []
                        , final = Name "hole" 25:8-25:12
                        }
                    ) 25:8-25:12
                )
                [
                    ( PCons
                        ( Path
                            { path = []
                            , final = Name "Filled" 26:4-26:10
                            }
                        )
                        [ PId
                            ( Name "range" 26:11-26:16 ) ( . )
                        ] 26:4-26:16
                    , Accessor
                        ( Lower
                            ( Path
                                { path = []
                                , final = Name "range" 26:20-26:25
                                }
                            ) 26:20-26:25
                        )
                        ( Name "line" 26:26-26:30 ) 26:26-26:30
                    )
                ,
                    ( PCons
                        ( Path
                            { path = []
                            , final = Name "Empty" 27:4-27:9
                            }
                        ) [] 27:4-27:9
                    , Upper
                        ( Path
                            { path = []
                            , final = Name "alt" 27:20-27:23
                            }
                        ) 27:20-27:23
                    )
                ] 25:2-27:23
            , declExt = ( . )
            }
        , LetDecl
            { declName = Name "sequenced!" 29:4-29:14
            , declArgs = []
            , declBody = Block
                ( BlBind
                    ( Call
                        ( Upper
                            ( Path
                                { path = []
                                , final = Name "print" 30:2-30:7
                                }
                            ) 30:2-30:7
                        )
                        ( Lit
                            ( LStr "a" 30:8-30:11 ) ( . ) :| []
                        ) 30:2-30:11
                    )
                    ( BlBind
                        ( Call
                            ( Upper
                                ( Path
                                    { path = []
                                    , final = Name "print" 31:2-31:7
                                    }
                                ) 31:2-31:7
                            )
                            ( Lit
                                ( LStr "b" 31:8-31:11 ) ( . ) :| []
                            ) 31:2-31:11
                        )
                        ( BlEnd
                            ( Call
                                ( Upper
                                    ( Path
                                        { path = []
                                        , final = Name "print" 32:2-32:7
                                        }
                                    ) 32:2-32:7
                                )
                                ( Lit
                                    ( LStr "c" 32:8-32:11 ) ( . ) :| []
                                ) 32:2-32:11
                            )
                        )
                    )
                ) 30:2-32:11
            , declExt = ( . )
            }
        ]
    , programExt = ( . )
    }